name: "Build-Push-Deploy"

on:
  push:
    branches-ignore:
      - 'dependabot/**'

env:
  AZ_RESOURCE_GROUP: "tgrall-demo"
  AZ_CLUSTER_NAME: "tug-kube"
  NAMESPACE_DEV: "development"
  NAMESPACE_STAGING: "staging"
  NAMESPACE_PROD: "production"

jobs:

  hello:
    name: "👋 - Starting"
    runs-on: ubuntu-latest  
    steps:
    - name: Starting
      id: init
      run: |
        echo "Starting CI/CD of ${{ github.repository }}"      
        
  build:
    name: "🚧 - Build & Test"
    needs: hello    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: github
          server-username: MAVEN_USERNAME
          server-password: MAVEN_GHPR_PASSWORD

      # Utilize caching of the resolved plugins and dependencies from previous Maven builds to provide
      # faster builds when dependencies have not changed.
      - name: Cache Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          # Hash on the POM file as that would need to change to modify the dependencies or plugins in use
          key: mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            mvn-${{ hashFiles('**/pom.xml') }}
            mvn-

      - name: Build with Maven
        env:
          MAVEN_USERNAME: octodemobot
          MAVEN_GHPR_PASSWORD: ${{secrets.MY_GITHUB_PERSONAL_TOKEN}}
        run: |
          mvn -B package --file pom.xml

      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          name: calculator-service.jar
          path: target/calculator-service-*.jar

  build_publish_container:
    name: "🐳 - Push container image to GitHub Packages"

    # Do not run this on dependabot triggered activities as it cannot read the Actions Secrets.
    if: ${{ !(contains(github.actor, 'dependabot[bot]')) }}

    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Jar file artifact
        uses: actions/download-artifact@v2
        with:
          name: calculator-service.jar
          path: target

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - name: GitHub Container Registry Login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: octodemobo
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Container
        id: container_publish
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            VERSION=1.0.0
            REPOSITORY_NAME=${{ github.repository }}
            revision=${{ github.sha }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.sha }}

  deploy_to_development:
    name: "🌩️ - Deploy to Kubernetes: Development"
  
    needs: build_publish_container
    environment: 
      name: development        
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - name: Set namespace
        run: |
          echo "DEV_NS=dev-pr-${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: "🌩️ - Deploy to Development"
        if: ${{ github.ref != 'refs/heads/main' }}
        id: applyDeploymentDevelopment
        run: |
          kubectl create namespace $DEV_NS --dry-run=client -o json | kubectl apply -f -  
          sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml
          kubectl apply -f ./kubernetes/deployment.yml --namespace=$DEV_NS
          echo "🏁 - Service ${{ github.repository }} update in ${{ env.DEV_NS }} "
          
  deploy_to_staging:
    name: "🌩️ - Deploy to Kubernetes: Staging"
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: build_publish_container
    environment: 
      name: staging        
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - name: "🌩️ - Deploy to Stage"
        if: ${{ github.ref == 'refs/heads/main' }}
        id: applyDeploymentStage
        run: |
            kubectl create namespace $NAMESPACE_STAGING --dry-run=client -o json | kubectl apply -f -          
            sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml  
            kubectl apply -f ./kubernetes/deployment.yml --namespace=${{ env.NAMESPACE_STAGING }}
            echo "🏁 - Service ${{ github.repository }} update in ${{ env.NAMESPACE_STAGING }} "
          
  deploy_to_production:
    name: "🌩️ - Deploy to Kubernetes: Production"  
    needs: build_publish_container
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: 
      name: production        
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV
      
      - name: "🌩️ - Deploy to Production"
        id: applyDeploymentProduction
        run: |
          kubectl create namespace $NAMESPACE_PROD --dry-run=client -o json | kubectl apply -f -                  
          sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml
          kubectl apply -f ./kubernetes/deployment.yml --namespace=${{ env.NAMESPACE_PROD }}
          echo "🏁 - Service ${{ github.repository }} update in ${{ env.NAMESPACE_PROD }} "          
