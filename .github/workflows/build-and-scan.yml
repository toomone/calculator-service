name: Build and MS defender scan the container

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  workflow_dispatch 

permissions:
      id-token: write
      contents: read

jobs:

  hello:
    name: "üëã - Starting"
    runs-on: ubuntu-latest  
    steps:
    - name: Starting
      id: init
      run: |
        echo "Starting CI/CD of ${{ github.repository }}"      
        
  build:
    name: "üöß - Build & Test"
    needs: hello    
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '11'

      # Utilize caching of the resolved plugins and dependencies from previous Maven builds to provide
      # faster builds when dependencies have not changed.
      - name: Cache Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          # Hash on the POM file as that would need to change to modify the dependencies or plugins in use
          key: mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            mvn-${{ hashFiles('**/pom.xml') }}
            mvn-

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          name: calculator-service.jar
          path: target/calculator-service-*.jar

  build_publish_container:
    name: "üê≥ - Push container image to Azure Container Registry "

    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Jar file artifact
        uses: actions/download-artifact@v2
        with:
          name: calculator-service.jar
          path: target

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - run: docker build . -t acrdevopsforum.azurecr.io/calculator-service:${{ github.sha }}

      - uses: Azure/container-scan@v0
        name: Scan image for vulnerabilities
        id: container-scan
        continue-on-error: true      
        with:
          image-name: acrdevopsforum.azurecr.io/calculator-service:${{ github.sha }}

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Login to ACR'
        run: az acr login --name acrdevopsforum

      - run: docker push acrdevopsforum.azurecr.io/calculator-service:${{ github.sha }}

      - name: Post logs to appinsights
        uses: Azure/publish-security-assessments@v0
        with: 
          scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
          connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
          subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}  

  # Deploy to the development namespace
  #   the namespace is generated and created from the feature branch name
  deploy_to_development:
    name: "üå©Ô∏è - Deploy to Kubernetes: Development"
    if: ${{ github.ref != 'refs/heads/main' }}
    needs: build_publish_container
    environment: 
      name: development        
      url: ${{steps.kube-deploy.outputs.service-url}}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - name: Set namespace
        run: |
          echo "DEV_NS=dev-pr-${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: "üå©Ô∏è - Deploy to Development"
        if: ${{ github.ref != 'refs/heads/main' }}
        id: kube-deploy
        run: |
          kubectl create namespace $DEV_NS --dry-run=client -o json | kubectl apply -f -  
          sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml
          kubectl apply -f ./kubernetes/deployment.yml --namespace=$DEV_NS
          IP_SERVICE=$(kubectl get services -n ${{ env.DEV_NS }}  -o json | jq -r '.items[] | select(.metadata.name == "calculator-service") | .status.loadBalancer?|.ingress[]?|.ip')
          echo "IP_SERVICE=$IP_SERVICE" >> $GITHUB_ENV
          echo "üèÅ - Service ${{ github.repository }} update in $DEV_NS : http://$IP_SERVICE:8080 "
          echo "::set-output name=service-url::http://$IP_SERVICE:8080"

               
          
  deploy_to_staging:
    name: "üå©Ô∏è - Deploy to Kubernetes: Staging"
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: build_publish_container
    environment: 
      name: staging        
      url: ${{steps.kube-deploy.outputs.service-url}}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV

      - name: "üå©Ô∏è - Deploy to Stage"
        if: ${{ github.ref == 'refs/heads/main' }}
        id: kube-deploy
        run: |
            kubectl create namespace $NAMESPACE_STAGING --dry-run=client -o json | kubectl apply -f -          
            sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml  
            kubectl apply -f ./kubernetes/deployment.yml --namespace=${{ env.NAMESPACE_STAGING }}
            IP_SERVICE=$(kubectl get services -n ${{ env.NAMESPACE_STAGING }}  -o json | jq -r '.items[] | select(.metadata.name == "calculator-service") | .status.loadBalancer?|.ingress[]?|.ip')
            echo "IP_SERVICE=$IP_SERVICE" >> $GITHUB_ENV
            echo "üèÅ - Service ${{ github.repository }} update in $NAMESPACE_STAGING : http://$IP_SERVICE:8080 "
            echo "::set-output name=service-url::http://$IP_SERVICE:8080"

          
  deploy_to_production:
    name: "üå©Ô∏è - Deploy to Kubernetes: Production"  
    needs: build_publish_container
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: 
      name: production        
      url: ${{steps.kube-deploy.outputs.service-url}}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        id: getContext
        run: |
          az aks get-credentials --resource-group ${{ env.AZ_RESOURCE_GROUP }} --name ${{ env.AZ_CLUSTER_NAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 8

      - run: echo "SHA8=${{ steps.short-sha.outputs.sha }}" >> $GITHUB_ENV
      
      - name: "üå©Ô∏è - Deploy to Production"
        id: kube-deploy
        run: |
          kubectl create namespace $NAMESPACE_PROD --dry-run=client -o json | kubectl apply -f -                  
          sed -i 's/COMMIT_SHA/${{env.SHA8}}/g' kubernetes/deployment.yml
          kubectl apply -f ./kubernetes/deployment.yml --namespace=${{ env.NAMESPACE_PROD }}
          IP_SERVICE=$(kubectl get services -n ${{ env.NAMESPACE_PROD }}  -o json | jq -r '.items[] | select(.metadata.name == "calculator-service") | .status.loadBalancer?|.ingress[]?|.ip')
          echo "IP_SERVICE=$IP_SERVICE" >> $GITHUB_ENV
          echo "üèÅ - Service ${{ github.repository }} update in $NAMESPACE_PROD : http://$IP_SERVICE:8080 "
          echo "::set-output name=service-url::http://$IP_SERVICE:8080"

